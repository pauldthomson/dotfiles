filetype plugin indent on
syntax on

set cursorline

" don't use arrowkeys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" really, just don't
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>

colorscheme nord
let g:nord_italic = 1
let g:nord_underline = 1
let g:nord_italic_comments = 1
let g:nord_uniform_status_lines = 1
let g:nord_cursor_line_number_background = 1

let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

set laststatus=2

" Attempt to make markdown preview work
let g:mkdp_browser = 'chrome'

" Disable old vi compatibility
" :help compatible
set nocompatible	

" Always show line numbers
set number

" Show relative line numbers
set relativenumber

set encoding=utf-8
set background=dark

" A tab is four spaces
set tabstop=8 
set softtabstop=0 
set expandtab 
set shiftwidth=4 
set smarttab

" Indent yaml files with two spaces
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Allow global searching with :find
set path+=**

" For tab completion with :find
set wildmenu

" Show matching parenthesis
set showmatch

" Highlight search terms
set hlsearch

" Show search matches as you type
set incsearch

" Case insensitive searching
set ignorecase

" Search is case sensitive only if an uppercase character is used
set smartcase

" No beep
set noerrorbells

" No beep
set visualbell

" Use jk to exit insert mode 
inoremap jk <ESC>

" Toggle spelling visuals with <leader>s
nnoremap <leader>s :set spell!

" Easier navigating of vim splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" More  natural split opening
set splitbelow
set splitright

"if &term =~ '256color'
"	" disable Background Color Erase (BCE) so that color schemes
"	" render properly when inside 256-color tmux and GNU screen.
"	" see also http://snk.tuxfamily.org/log/vim-256color-bce.html
"	set t_ut=
"endif

" To make gitgutter diff markers show faster
set updatetime=250

" Make ctags work in project subdirectories
set tags=tags;/

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=rg\ --vimgrep

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Airline customisation
"let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme = 'angr'
"let g:airline_powerline_fonts = 1

" Open fugitive diff in verticle splits
set diffopt+=vertical

" Vim test mappings
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g

" Make test commands execute using vimux.vim
let test#strategy = "vimux"

" Fzf
set rtp+=/usr/local/opt/fzf

nnoremap <C-n> :Files<CR>
nnoremap <C-a> :Rg<Space>

" Format terraform
let g:terraform_fmt_on_save = 1
let g:tereraform_align = 1

" use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

" Golang Stuff
"
" Highlighting
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

" Show info about type or method
let g:go_auto_type_info = 1

" GoDef Config 
autocmd FileType go let g:go_def_mode = 'godef'
