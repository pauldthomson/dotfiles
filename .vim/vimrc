" =========================
" Vim built in config
" =========================
filetype plugin indent on
syntax on
set cursorline
set number
set relativenumber
set autowrite
set encoding=utf-8
set tabstop=4 
set expandtab 
set shiftwidth=4 
set smarttab
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
set noerrorbells
set visualbell
set splitbelow
set splitright
" set list lcs=tab:\|\  

"Get the 2-space YAML as the default when hit carriage return after the colon
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Disable arrowkeys in insert and normal modes
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>

" Move visual selection
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv

" Map leader to space
let mapleader="\<Space>"

" Always show statusline
set laststatus=2

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Use jk to exit insert mode 
inoremap jk <ESC>

" Use ctrl+hjkl to navigate splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Save buffer
nnoremap <leader>w :w<cr>

" Copy to system clipboard in visual mode
vmap <leader>y "+y

" Paste from system clipboard
nmap <leader>p "+p

" =========================
" NERDTree
" =========================

" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" Open current file in NERDTree
nnoremap <silent> <Leader>cf :NERDTreeFind<CR>

" Show hidden files in NERDTree
let NERDTreeShowHidden=1

" =========================
" vim-java
" =========================

" Java syntax
let g:java_highlight_functions = 1

" =========================
" Colourscheme
" =========================
colorscheme codedark

" =========================
" vim-airline
" =========================
let g:airline_theme = 'codedark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" =========================
" vim-gitgutter
" =========================
" To make gitgutter diff markers show faster
set updatetime=100
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" =========================
" vim-fugitive
" =========================
" Open fugitive diff in verticle splits
set diffopt+=vertical

" =========================
" fzf
" =========================
set rtp+=/usr/local/opt/fzf

" fzf files
nnoremap <leader>f :Files<CR>

" fzf lines in file
nnoremap <leader>/ :BLines<cr>

" fzf vim commands
nnoremap <leader>c :Commands<cr>

" Open fzf buffers list
nnoremap <leader>e :Buffers<cr>

" Use ripgrep
nnoremap <leader>r :Rg<Space>

if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
endif

" =========================
" vim-terraform
" =========================
" Format terraform
let g:terraform_fmt_on_save = 1
let g:tereraform_align = 1

" =========================
" coc.nvim
" =========================
" Use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Coc rename
nmap <F2> <Plug>(coc-rename)

" Use enter to select completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" =========================
" vim-go
" =========================
" Highlighting
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

" Show info about type or method
let g:go_auto_type_info = 1

" Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>t  <Plug>(go-test)

" Run goimports on save
let g:go_fmt_command = "goimports"

" Control how to open buffer when alternating between test and src
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
autocmd Filetype go nmap <leader>gav <Plug>(go-alternate-vertical)
autocmd Filetype go nmap <leader>ga <Plug>(go-alternate-edit)
autocmd Filetype go nmap <F12> :GoDecls<CR>
autocmd FileType go nmap <F10> :GoTest<CR>
autocmd FileType go nmap <F9> :GoTestFunc<CR>
autocmd FileType go nmap <F7> :GoReferrers<CR>
autocmd FileType go nmap <F2> :GoRename<CR>

" Automatically highlight same identifiers (functions, variables etc)
let g:go_auto_sameids = 1

" Use gopls everywhere I can
let g:go_def_mode = 'gopls'
let g:go_info_mode = 'gopls'
let g:go_rename_command = 'gopls'
let g:go_gopls_complete_unimported = 1

" =========================
" indentLine
" =========================
" Scrolling performance
let g:indentLine_faster     = 1
let g:indentLine_char = '|'
